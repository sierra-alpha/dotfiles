#!/bin/bash

# gnp = GitHub New Project
# Takes a local cwd and initialises it as a git repo if need be
# creates an upstream repo at Gh and sets it as origin and pushes to it

function welcome () {
    echo "Welcome to the GitHub New Project initialiser"
    echo -e "This will git init, create a new repo on GitHub, "
    echo -e "set the origin and push to git hub for you\n"
}

function help_me() {
    echo -e "Usage: gnp <username> <reponame> -p -d <description>\n"
    echo "-p                = use this option to set github repo as private"
    echo "-d (optional)     = a description and requires a description after it\n"
    echo "-h                = Displays this help message"
}

function github_new_project() {
    local arg_len user dirty reponame private description remotetext pushlinktext branch OPTIND=1

    arg_len=$#

    user=$1
    reponame=$2
    shift 2
    private=""
    description=""

    while getopts ':d:hp' options; do
	case $options in
	    p )
		if [[ $arg_len -ge 2 ]]; then
		    private="-p"
		fi
		;;
	    d )
		if [[ $arg_len -ge 2 ]]; then
		    description=("-d" "$OPTARG")
		    echo "${description[@]}"
		fi
		;;
	    h )
		welcome
		help_me
		return
		;;
	    \? )
		if [[ $arg_len -ge 2 ]]; then
		    echo "Unrecognised options"
		    help_me
		    return
		fi
		;;
	    : )
		if [[ $arg_len -ge 2 ]]; then
		    echo "Invalid option: -$OPTARG requires an argument"
		    help_me
		    return
		fi
		;;
	esac
    done


    if [[ $arg_len -lt 2 ]]; then
	echo "Not enough arguments passed"
	help_me
	return
    fi

    # if it's a new repo it needs a file to push, if it's not new we
    # need to make a change so we just touch the readme
    local read_file="README.md"
    echo "git init"
    git init
    if [ -s "$read_file" ]
    then
	echo "Touching $read_file"
	touch "$read_file"
    else
	echo "creating $read_file"
	echo "This is the initial $read_file" > "$read_file"
    fi
    echo "git add ."
    git add .
    echo "git commit -m \"Repo initialisation\""
    git commit -m "Repo initialisation"
    . $(dirname $BASH_SOURCE)/ghrc "$user" "$reponame" "$private" "${description[@]}"
    if git ls-remote --quiet --exit-code &>/dev/null; then
	local datetime=`date +%F-%H-%M-%S`
	echo -e "Old origin exists, renaming original origin\ngit remote rename origin origin-$datetime"
	git remote rename origin origin-$datetime
    fi
    remotetext="git remote add origin git@github.com:${user}/${reponame}.git"
    echo -e "setting the remote now\n${remotetext}"
    eval $remotetext
    if ! branch=$(git symbolic-ref --short -q HEAD); then
	branch="wip"
    fi
    pushlinktext="git push --set-upstream origin ${branch}"
    eval $pushlinktext
}    

github_new_project "$@"
